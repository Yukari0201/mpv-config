#### ------- Mpv-Playlistmanager configuration ------- ####

#### ------- FUNCTIONAL ------- ####

#navigation keybindings force override only while playlist is visible
#if "no" then you can display the playlist by any of the navigation keys
# 导航键只在播放列表显示时才强制覆盖。
# 如果“no”，你可以按任何导航键键显示播放列表。
dynamic_binds=yes

# To bind multiple keys separate them by a space
# 若要绑定多组快捷键，请用空格隔开

# main key to show playlis
# 显示播放列表的重要键
key_showplaylist=SHIFT+ENTER

# display playlist while key is held down
# 按住键时显示播放列表
key_peek_at_playlist=

# dynamic keys
# 用于在播放列表中移动的快捷键
key_moveup=UP
key_movedown=DOWN
key_movepageup=PGUP
key_movepagedown=PGDWN
key_movebegin=HOME
key_moveend=END
key_selectfile=RIGHT LEFT
key_unselectfile=
key_playfile=ENTER
key_removefile=BS
key_closeplaylist=ESC SHIFT+ENTER

# extra functionality keys
# 额外的功能快捷键键
key_sortplaylist=
key_shuffleplaylist=
key_reverseplaylist=
key_loadfiles=l
key_saveplaylist=

#json format for replacing, check .lua for explanation
#example json=[{"ext":{"all":true},"rules":[{"_":" "}]},{"ext":{"mp4":true,"mkv":true},"rules":[{"^(.+)%..+$":"%1"},{"%s*[%[%(].-[%]%)]%s*":""},{"(%w)%.(%w)":"%1 %2"}]},{"protocol":{"http":true,"https":true},"rules":[{"^%a+://w*%.?":""}]}]
#empty for no replace
filename_replace=[{"protocol":{"all":true},"rules":[{"%%(%x%x)":"hex_to_char"}]}]

#filetypes to search from directory
# 从目录中搜寻的文件类型
## [译注] 默认：loadfiles_filetypes=["jpg","jpeg","png","tif","tiff","gif","webp","svg","bmp","mp3","wav","ogm","flac","m4a","wma","ogg","opus","mkv","avi","mp4","ogv","webm","rmvb","flv","wmv","mpeg","mpg","m4v","3gp"]
loadfiles_filetypes=["jpg","jpeg","png","tif","tiff","gif","webp","svg","bmp","mp3","wav","ogm","flac","m4a","wma","ogg","opus","mkv","avi","mp4","ogv","webm","rmvb","flv","wmv","mpeg","mpg","m4v","3gp"]

#loadfiles at startup if 1 or more items in playlist
# 如果播放列表中有一个或多个项目，则在启动时加载文件
loadfiles_on_start=no
#loadfiles from working directory on idle startup
# 在空闲启动时从工作目录加载文件
loadfiles_on_idle_start=no
#always put loaded files after currently playing file
# 总是把加载的文件放在当前播放的文件之后
loadfiles_always_append=no

#sort playlist when any files are added to playlist after initial load
# 首次加载之后再将文件添加到播放列表时对播放列表排序
sortplaylist_on_file_add=no

#default sorting method, must be one of: "name-asc", "name-desc", "date-asc", "date-desc", "size-asc", "size-desc".
# 默认排序方式，必须为下列之一："name-asc", "name-desc", "date-asc", "date-desc", "size-asc", "size-desc".
## [译注] *-asc 升序；*-desc 降序
default_sort=name-asc

#linux | windows | auto
system=auto

#Use ~ for home directory. Leave as empty to use mpv/playlists
# 使用 ~ 作为主目录。留空使用 mpv/playlists
playlist_savepath=

#constant filename to save playlist as. Note that it will override existing playlist. Leave empty for generated name.
# 将播放列表保存时使用的常量文件名。注意，这将覆盖现有的播放列表。请为生成的文件名留空。
playlist_save_filename=

#save playlist automatically after current file was unloaded
# 退出当前文件后自动保存播放列表
save_playlist_on_file_end=no

#2 shows playlist, 1 shows current file(filename strip applied), 0 shows nothing
# 2 显示播放列表，1 显示当前文件（使用文件名），0 什么都不显示
show_playlist_on_fileload=0

#sync cursor when file is loaded from outside reasons(file-ending, playlist-next shortcut etc.)
# 当由于外部原因加载文件时同步导航位置（外部原因：文件结束，播放列表下一项快捷键等）
sync_cursor_on_load=yes

#allow the playlist cursor to loop from end to start and vice versa
# 允许播放列表导航位置从结尾直接循环至开头，反之亦然。
loop_cursor=yes

#youtube-dl executable for title resolving if enabled, probably "youtube-dl" or "yt-dlp", can be absolute path
# youtube 可执行文件路径，用于标题解析（如果启用），可能为 "youtube-dl" 或 "yt-dlp"，可以为绝对路径
youtube_dl_executable=yt-dlp

#allow playlistmanager to write watch later config when navigating between files
# 允许 playlistmanager 在文件之间导航时写入 watch later
allow_write_watch_later_config=yes

#reset cursor navigation when closing or opening playlist
# 关闭或打开播放列表时重置导航位置
reset_cursor_on_close=yes
reset_cursor_on_open=yes

#### ------- VISUAL ------- ####

#prefer to display titles for following files: "all", "url", "none". Sorting still uses filename
# 偏好显示下列文件的标题："all", "url", "none"。排序依然使用文件名。
prefer_titles=url

#call youtube-dl to resolve the titles of urls in the playlist
#if yes, prefer_titles must be set to "url" or "all" for this to work
# 调用 youtube-dl 解析播放列表中 url 的标题
# 如果 yes，prefer_titles 必须设置为 "url" 或 "all" 才能工作
resolve_url_titles=yes

#call ffprobe to resolve the titles of local files in the playlist (if they exist in the metadata)
#if yes, prefer_titles must be set to "all" for this to work
# 调用 ffprobe 解析播放列表中本地文件的标题（如果它们存在于元数据中）
# 如果 yes，prefer_titles 必须设置为 "all" 才能工作
resolve_local_titles=yes

#timeout in seconds for url title resolving
# 解析 url 标题的超时秒数
resolve_title_timeout=15

#how many url titles can be resolved at a time. Higher number might lead to stutters.
# 一次可以解析多少个 url 标题。较高的数字可能导致卡慢。
concurrent_title_resolve_limit=10

#osd timeout on inactivity in seconds, use 0 for no timeout
# osd 不活动的超时时间，以秒为单位，0 表示无超时
playlist_display_timeout=0

#when peeking at playlist, show playlist at the very least for display timeout
# 查看播放列表时，至少显示播放列表一段时间再停止显示
peek_respect_display_timeout=no

#the maximum amount of lines playlist will render. Optimal value depends on font/video size etc.
# 播放列表显示的最大行数。最佳值取决于字体/视频大小。
showamount=12

#font size scales by window, if no then needs larger font and padding sizes
# 文字随窗口缩放，如果 no 则需要更大的字体和填充大小
scale_playlist_by_window=yes
#playlist ass style overrides
# 播放列表 ass 样式覆盖
#example {\fnUbuntu\fs10\b0\bord1} equals: font=Ubuntu, size=10, bold=no, border=1
#read http://docs.aegisub.org/3.2/ASS_Tags/ for reference of tags
#no values defaults to OSD settings in mpv.conf
# 示例：{\fnUbuntu\fs10\b0\bord1} 等于：字体=Ubuntu，字体大小=10，加粗=no，字体边框=1
# 参阅 http://docs.aegisub.org/3.2/ASS_Tags/ 获取 ass 标签的参考
## [译注] 个人还建议阅读 https://github.com/weizhenye/ASS/wiki/ASS-%E5%AD%97%E5%B9%95%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83
style_ass_tags={\fnNoto Sans CJK SC\fs11}
#paddings for top left corner
# 左上角填充
text_padding_x=10
text_padding_y=8

#screen dim when menu is open 0.0 - 1.0 (0 is no dim, 1 is black)
# 菜单打开时屏幕变暗，0.0 - 1.0（0 为不变暗，1 为全黑）
curtain_opacity=0

#set title of window with stripped name
# 使用精简名称设置窗口标题
set_title_stripped=no
title_prefix=
title_suffix= - mpv

#slice long filenames, and how many chars to show
# 切断长文件名，以及要显示多少字符
slice_longfilenames=no
slice_longfilenames_amount=70

#Playing header. One newline will be added after the string.
# 最上面一行显示的文字。字符串后将添加一个换行符
#%mediatitle or %filename = title or name of playing file | 正在播放的文件的标题或文件名
#%pos = position of playing file | 正在播放的文件（在播放列表中）的位置
#%cursor = position of navigation | 导航位置
#%plen = playlist lenght | 播放列表长度
#%N = newline | 换行符
playlist_header=[%cursor/%plen]

#Playlist file templates
# 播放列表文件名模板
#%pos = position of file with leading zeros | 文件在播放列表中位置的序号
#%name = title or name of file | 文件的标题或文件名
#%N = newline | 换行符
#you can also use the ass tags mentioned above. For example:
#  selected_file={\c&HFF00FF&}➔ %name   | to add a color for selected file. However, if you
#  use ass tags you need to reset them for every line (see https://github.com/jonniek/mpv-playlistmanager/issues/20)
normal_file=○  -  %name
hovered_file=●  -  %name
selected_file=➔  -  %name
playing_file=▷  -  %name
playing_hovered_file=▶  -  %name
playing_selected_file=➤  -  %name

#what to show when playlist is truncated
# 当播放列表被截断时显示什么
playlist_sliced_prefix=...
playlist_sliced_suffix=...

#output visual feedback to OSD when saving, shuffling, reversing playlists
# 在保存、随机播放、反转播放列表时向 OSD 输出视觉反馈
display_osd_feedback=yes
